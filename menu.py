import datetime
import sqlite3
from interfaz_usuario import mostrar_menu, opcion_menu, mensaje, mostrar_lista, mostrar_detalle_cambio_stock, mostrar_lista_eliminados, mostrar_lista_usuarios, mostrar_lista_usuarios_eliminados, mostrar_lista_usuarios_seleccion, imprimir_lista, opcion_menu_con_0, opcion_menu_2_con_0, imprimir_lista_dos_valores, reportar_tiempo_por_usuario_total_entrefechas, reportar_tiempo_usuarios_por_dia_entrefechas, reportar_ventas_por_usuario_por_dia_entrefechas, reportar_ventas_por_usuario_total_entrefechas, mostrar_productos_entre_cantidades_stock
from variables import lista_inicio_fin, lista_menu_principal, lista_menu_claves_producto, lista_menu_orden, perfiles_usuario, lista_menu_buscar, lista_si_no, lista_menu_claves_usuarios, lista_menu_usuarios, lista_menu_mantenimiento, lista_menu_eliminar, lista_menu_ver
from utilidades import ordenar_lista, crear_listas_valores, crear_listas_valores_dos_claves, clear_screen
from database import traer_id_producto_preex_desde_db, agregar_producto_db, recuperar_usuarios_eliminados_en_db, actualizar_usuario_en_db, eliminar_usuario_en_db, cargar_lista_con_id_desde_db_opcion, agregar_usuario_en_db, recuperar_movimientos_producto_en_db, recuperar_producto_eliminados_en_db, cargar_lista_con_id_desde_db, actualizar_item_producto_en_db, eliminar_producto_en_db, eliminar_movimientos_producto_en_db, iniciar_carga_productos_eliminados, traer_id_producto_desde_db, generar_reportes_ventas_en_db, generar_reportes_tiempo_usuario_en_db, generar_reporte_de_bajo_stock, eliminar_logs_usuario_en_db
from usuarios import agregar_usuario, editar_usuario, seguir_usuario
from productos import agregar_producto, encontrar_producto, buscar_codigo, actualizar_movimientos_producto, actualizar_atributos_producto ,buscar_producto_2, encontrar_producto_por_id, encontrar_producto_por_descripcion
from validaciones import validar_fecha



def menu_restriccion_de_acceso(msj):
    """Funci√≥n que devuelve un valor booleano seg√∫n sea la elecci√≥n del usuario. Recibe una cadena de caracteres como argumento para mostrar un mensaje para que el usuario decida la ruta a seguir

    Args:
        msj (str): mensaje para tomar la decisi√≥n 

    Returns:
        (bool): valor booleano seg√∫n decidi√≥ el usuario
    """
    clear_screen()
    mensaje(f"üõí   {msj.upper()}   ‚úï")
    mostrar_menu("   Men√∫ [RAIZ] ‚Üí", lista_inicio_fin, 1, 1, True, 1, "‚Üê Salir", "", "")
    match opcion_menu(2, "Ingresar DATOS"):
        case 1:
            clear_screen()
            bucle_menu_principal = True
        case 2:
            clear_screen()
            mensaje("üîö")
            bucle_menu_principal = False
    return bucle_menu_principal 


def menu_agregar_producto(productos, usuario, logs_usuario, id_autoinc):
    """Agrega un nuevo producto, si ese producto no existe previamente en la base de datos. Primero pasa ese nuevo registro a la base de datos y chequea que esos campos no existan en la misma. Trae de la BD el valor del id del producto, si ese valor es nulo entonces agrega ese nuevo producto y actualiza el id del producto con el valor del indice de la BD en la lista de diccionarios 'productos'. Se va registrando en la lista logs_usuario lo que va ocurriendo y esa lista de sucesos devuelva esta funci√≥n junto con la variable entera id_autoinc.

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    bucle_menu_agregar = True
    while bucle_menu_agregar:
        mostrar_menu("   Men√∫ [AGREGAR PRODUCTO] ‚Üí", lista_menu_principal, 1, 1, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                mensaje("üõí   INGRESE PRODUCTO AL STOCK   ‚Üí")
                nuevo_producto = agregar_producto()
                id_preex = traer_id_producto_preex_desde_db("crud", "productos", nuevo_producto)
                if id_preex:
                    etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"intento de agregar producto '{nuevo_producto["codigo"]} - {nuevo_producto["marca"]}': ya existe en stock ‚úï", id_producto=id_preex)
                    logs_usuario.append(etapa_usuario) 
                    clear_screen()
                    mensaje(f"üõí   PRODUCTO EXISTENTE EN STOCK   ‚úï")
                else:
                    agregar_producto_db("crud", "productos", nuevo_producto)                                                   
                    nuevo_producto.update({"id": traer_id_producto_desde_db("crud", "productos", nuevo_producto)})
                    productos.append(nuevo_producto)
                    etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto '{nuevo_producto["codigo"]} - {nuevo_producto["marca"]}' agregado ‚úì", id_producto=nuevo_producto["id"])
                    logs_usuario.append(etapa_usuario)                                             
                    clear_screen()
                    mensaje(f"üõí   PRODUCTO AGREGADO: '{nuevo_producto.get("codigo").upper()}' '{nuevo_producto.get("descripcion").upper()}'   ‚úì")
                    nuevo_producto_lista = []
                    nuevo_producto_lista.append(nuevo_producto)
                    mostrar_lista(nuevo_producto_lista)
                print("\n")
            case 2:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ agregar producto")
                logs_usuario.append(etapa_usuario)  
                bucle_menu_agregar = False
    return id_autoinc 


def submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, atributo_1, atributo_2="marca", atributo_3="codigo"):
    """Funci√≥n que de acuerdo a su men√∫ interactivo de opciones muestra en consola todos los productos por el atributo seleccionado (que recibe como par√°metro). Ordena esa selecci√≥n o puede regresar al men√∫ anterior para seleccionar otro atributo, o bien al men√∫ principal del programa saliendo del men√∫ para ver el listado de productos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json
        atributo_1 (str): atributo seleccionado para mostrar por orden
        atributo_2 (str, optional): _description_. Defaults to "marca".
        atributo_3 (str, optional): _description_. Defaults to "codigo".

    Returns:
        bucle_menu_mostrar (bool): variable para retorno al men√∫ ver
        bucle_menu_ver (bool): variable para retorno al men√∫ principal
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    bucle_menu_ordenar = bucle_menu_mostrar = bucle_menu_ver = True                                   
    while bucle_menu_ordenar and bucle_menu_mostrar and bucle_menu_ver:
        mostrar_menu(f"  Men√∫ [ORDENAR POR '{atributo_1.upper()}'] ‚Üí", lista_menu_orden, 1, 2, True, 3, "Men√∫ [MOSTRAR PRODUCTOS ORDENADOS POR ‚Üí]", "Men√∫ [VER PRODUCTOS]", "Men√∫ [PRINCIPAL]")
        match opcion_menu(5, "Ingresar DATOS"):
            case 1:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a muestra productos ordenados por {atributo_1} en forma ascendente")
                logs_usuario.append(etapa_usuario)
                mensaje(f"üõí   PRODUCTOS ORDENADOS POR {atributo_1.upper()} ‚Üë   ‚Üí")
                mostrar_lista(ordenar_lista(productos, atributo_1, atributo_2, atributo_3, True))
            case 2:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a muestra productos ordenados por {atributo_1} en forma descendente")
                logs_usuario.append(etapa_usuario)
                mensaje(f"üõí   PRODUCTOS ORDENADOS POR {atributo_1.upper()} ‚Üì   ‚Üí")
                mostrar_lista(ordenar_lista(productos, atributo_1, atributo_2, atributo_3, False))
            case 3:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del submen√∫ mostrar productos y vuelve al men√∫ mostrar productos ordenados por el atributo de orden que se seleccione")
                logs_usuario.append(etapa_usuario) 
                bucle_menu_ordenar = False
            case 4:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"sale del submen√∫ mostrar productos por {atributo_1}")
                logs_usuario.append(etapa_usuario) 
                bucle_menu_mostrar = False
            case 5:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"sale del submen√∫ mostrar productos por {atributo_1} y vuelve al men√∫ principal")
                logs_usuario.append(etapa_usuario)  
                bucle_menu_ver = False
    return bucle_menu_mostrar, bucle_menu_ver, id_autoinc 


def menu_ver_productos(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n que de acuerdo a su men√∫ interactivo de opciones permite seleccionar el atributo que va a determinar el orden del listado de productos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json. Tambi√©n genera un reporte de productos que tiene una cantidad en stock entre los valores que pasa el usuario.

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    bucle_menu_ver = True
    while bucle_menu_ver:
        mostrar_menu("   Men√∫ [VER PRODUCTOS] ‚Üí", lista_menu_ver, 1, 2, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(3, "Ingresar DATOS"):
            case 1:
                clear_screen()
                bucle_menu_mostrar = True
                while bucle_menu_mostrar and bucle_menu_ver:
                    mostrar_menu("   Men√∫ [MOSTRAR PRODUCTOS ORDENADOS POR] ‚Üí", lista_menu_claves_producto, 1, 12, True, 2, "Men√∫ [VER PRODUCTOS]", "Men√∫ [PRINCIPAL]", "")
                    match opcion_menu(14, "Ingresar DATOS"):
                        case 1:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "id")
                        case 2:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "descripcion")
                        case 3:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "codigo", "marca", "descripcion")
                        case 4:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "marca", "codigo", "descripcion")
                        case 5:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "modelo")
                        case 6:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "categoria")
                        case 7:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "origen")
                        case 8:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "ubicacion")
                        case 9:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "precio")
                        case 10:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "cantidad")
                        case 11:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "fecha_modificacion")
                        case 12:
                            bucle_menu_mostrar, bucle_menu_ver, id_autoinc  = submenu_mostrar_productos(productos, usuario, logs_usuario, id_autoinc, "fecha_alta")
                        case 13:
                            clear_screen()
                            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ mostrar productos y vuelve al men√∫ ver productos")
                            logs_usuario.append(etapa_usuario) 
                            bucle_menu_mostrar = False
                        case 14:
                            clear_screen()
                            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ ver productos y vuelve al men√∫ principal")
                            logs_usuario.append(etapa_usuario) 
                            bucle_menu_ver = False
            case 2:
                clear_screen()
                mensaje("üõí   INGRESE LAS CANTIDADES (DESDE‚ÜíHASTA) PARA GENERAR EL REPORTE  ‚Üí")
                cantidad_desde = input(f"\n# Cantidad M√≠nima: ").strip().lower()
                while not cantidad_desde.isdigit() or int(cantidad_desde) < 0:
                    cantidad_desde = input(f"\n# Cantidad M√≠nima: ").strip().lower()
                cantidad_hasta = input(f"\n# Cantidad M√°xima: ").strip().lower()
                while not cantidad_hasta.isdigit() or int(cantidad_hasta) < 0 or cantidad_hasta <= cantidad_desde:
                    cantidad_hasta = input(f"\n# Cantidad M√°xima: ").strip().lower()
                consulta_stock = generar_reporte_de_bajo_stock("crud", "productos", cantidad_desde, cantidad_hasta)
                fecha = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"genero reportes de productos con stock entre cantidades dadas")
                logs_usuario.append(etapa_usuario) 
                clear_screen()
                mostrar_productos_entre_cantidades_stock(consulta_stock, cantidad_desde, cantidad_hasta, usuario, fecha)
                print()
            case 3:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ ver productos y vuelve al men√∫ principal")
                logs_usuario.append(etapa_usuario) 
                bucle_menu_ver = False
    return id_autoinc 


def submenu_buscar_producto_por_id(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que busca un producto por su id y muestra en consola con los movimientos que tenga

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    resultado_busqueda = encontrar_producto_por_id(productos)
    if resultado_busqueda:
        clear_screen()
        mensaje("üõí   PRODUCTO ENCONTRADO   ‚úì")
        mostrar_lista(resultado_busqueda)
        etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a mostrar el producto: '{resultado_busqueda[0]["id"]}'")
        logs_usuario.append(etapa_usuario)
        if resultado_busqueda[0]["ingreso"]:
            mensaje("üõí   MOVIMIENTOS DE COMPRA   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["ingreso"],"compra")
        if resultado_busqueda[0]["egreso"]:
            mensaje("üõí   MOVIMIENTOS DE VENTA   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["egreso"],"venta")
        if resultado_busqueda[0]["ajuste"]:
            mensaje("üõí   MOVIMIENTOS DE AJUSTE   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["ajuste"],"ajuste")
    return id_autoinc 


def submenu_buscar_producto_por_descripcion(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que busca un producto por su descripci√≥n y muestra en consola con los movimientos que tenga

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    resultado_busqueda = encontrar_producto(productos)
    if resultado_busqueda:
        etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a mostrar el producto: '{resultado_busqueda[0]["descripcion"]}'")
        logs_usuario.append(etapa_usuario)
        if resultado_busqueda[0]["ingreso"]:
            mensaje("üõí   MOVIMIENTOS DE COMPRA   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["ingreso"],"compra")
        if resultado_busqueda[0]["egreso"]:
            mensaje("üõí   MOVIMIENTOS DE VENTA   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["egreso"],"venta")
        if resultado_busqueda[0]["ajuste"]:
            mensaje("üõí   MOVIMIENTOS DE AJUSTE   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["ajuste"],"ajuste")
    return id_autoinc 


def submenu_buscar_producto_por_codigo_marca(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que busca un producto por su c√≥digo-marca y muestra en consola con los movimientos que tenga

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    mensaje("üõí   B√öSQUEDA POR C√ìDIGO DEL PRODUCTO   ‚Üí")
    resultado_busqueda = buscar_codigo(productos)
    if resultado_busqueda:
        etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a mostrar el producto de '{resultado_busqueda[0].get("codigo").upper()} - {resultado_busqueda[0].get("marca").upper()}'")
        logs_usuario.append(etapa_usuario)
        if resultado_busqueda[0]["ingreso"]:
            mensaje("üõí   MOVIMIENTOS DE COMPRA   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["ingreso"],"compra")
        if resultado_busqueda[0]["egreso"]:
            mensaje("üõí   MOVIMIENTOS DE VENTA   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["egreso"],"venta")
        if resultado_busqueda[0]["ajuste"]:
            mensaje("üõí   MOVIMIENTOS DE AJUSTE   ‚úì")
            mostrar_detalle_cambio_stock(resultado_busqueda[0]["ajuste"],"ajuste")
    return id_autoinc


def submenu_buscar_producto_por_modelo_marca(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que busca un producto por su modelo-marca y muestra en consola con los movimientos que tenga

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    modelo_a_buscar = ""
    lista_modelos = crear_listas_valores_dos_claves(productos, "modelo", "marca")
    no_hay_modelo = True
    while len(modelo_a_buscar) == 0 or no_hay_modelo:
        clear_screen()
        mensaje("üõí   B√öSQUEDA DE PRODUCTOS POR MODELO / MARCA   ‚Üí")
        imprimir_lista_dos_valores(lista_modelos, "Modelos en el Stock")
        modelo_a_buscar = input("\n‚Ä¢ Modelo: ").strip().lower()
        for i in range(len(lista_modelos)):
            if modelo_a_buscar in lista_modelos[i]:
                no_hay_modelo = False
    marca_a_buscar = ""
    no_hay_marca = True
    while len(marca_a_buscar) == 0 or no_hay_marca:
        marca_a_buscar = input("\n‚Ä¢ Marca: ").strip().lower()
        for i in range(len(lista_modelos)):
            if marca_a_buscar in lista_modelos[i] and modelo_a_buscar in lista_modelos[i]:
                no_hay_marca = False
    por_modelo = buscar_producto_2(productos, "modelo", modelo_a_buscar)
    if len(por_modelo) >= 1:
        por_marca = buscar_producto_2(por_modelo, "marca", marca_a_buscar)
        if len(por_marca) >= 1:
            clear_screen()
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a mostrar productos de: '{por_marca[0].get("marca").upper()} - {por_modelo[0].get("modelo").upper()}'")
            logs_usuario.append(etapa_usuario)
            mensaje(f"üõí   PRODUCTOS DEL MODELO '{por_marca[0].get("marca").upper()} {por_modelo[0].get("modelo").upper()}' ‚úì")
            mostrar_lista(ordenar_lista(por_marca, "modelo", "marca", "codigo", True))
            resultado_busqueda = por_marca
            if len(resultado_busqueda) == 1:
                if resultado_busqueda[0]["ingreso"]:
                    mensaje("üõí   MOVIMIENTOS DE COMPRA   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["ingreso"],"compra")
                if resultado_busqueda[0]["egreso"]:
                    mensaje("üõí   MOVIMIENTOS DE VENTA   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["egreso"],"venta")
                if resultado_busqueda[0]["ajuste"]:
                    mensaje("üõí   MOVIMIENTOS DE AJUSTE   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["ajuste"],"ajuste")
        else:
            clear_screen()
            mensaje(f"üõí   MODELO INEXISTENTE PARA ESA MARCA  ‚úï")
    else:
        clear_screen()
        mensaje("üõí   MODELO INEXISTENTE   ‚úï")
    return id_autoinc


def submenu_buscar_producto_por_marca(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que busca un producto por su marca y muestra en consola con los movimientos que tenga

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    mensaje("üõí   B√öSQUEDA DE PRODUCTOS POR MARCA   ‚Üí")
    marca_a_buscar = ""
    lista_marcas = crear_listas_valores(productos, "marca")
    while len(marca_a_buscar) == 0 or marca_a_buscar not in lista_marcas:
        clear_screen()
        mensaje("üõí   B√öSQUEDA DE PRODUCTOS POR MARCA   ‚Üí")
        imprimir_lista(lista_marcas, "Marcas en el Stock")
        marca_a_buscar = input("\n‚Ä¢ Marca: ").strip().lower()
        por_marca = buscar_producto_2(productos, "marca", marca_a_buscar)
        if len(por_marca) >= 1:
            clear_screen()
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a mostrar productos de: '{por_marca[0].get("marca").upper()}'")
            logs_usuario.append(etapa_usuario)
            mensaje(F"üõí   PRODUCTOS DE LA MARCA '{por_marca[0].get("marca").upper()}' ‚úì")
            mostrar_lista(ordenar_lista(por_marca, "marca", "codigo", "modelo", True))
            resultado_busqueda = por_marca
            if len(resultado_busqueda) == 1:
                if resultado_busqueda[0]["ingreso"]:
                    mensaje("üõí   MOVIMIENTOS DE COMPRA   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["ingreso"],"compra")
                if resultado_busqueda[0]["egreso"]:
                    mensaje("üõí   MOVIMIENTOS DE VENTA   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["egreso"],"venta")
                if resultado_busqueda[0]["ajuste"]:
                    mensaje("üõí   MOVIMIENTOS DE AJUSTE   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["ajuste"],"ajuste")
        else:
            clear_screen()
            mensaje("üõí   MARCA INEXISTENTE   ‚úï")
    return id_autoinc


def submenu_buscar_producto_por_categoria(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que busca un producto por su categor√≠a y muestra en consola con los movimientos que tenga

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    categoria_a_buscar = ""
    lista_categorias = crear_listas_valores(productos, "categoria")
    while len(categoria_a_buscar) == 0 or categoria_a_buscar not in lista_categorias:
        clear_screen()
        mensaje("üõí   B√öSQUEDA DE PRODUCTOS POR CATEGOR√çA   ‚Üí") 
        imprimir_lista(lista_categorias, "Categor√≠as en el Stock")
        categoria_a_buscar = input("\n‚Ä¢ Categor√≠a: ").strip().lower()
        por_categoria = buscar_producto_2(productos, "categoria", categoria_a_buscar)
        if len(por_categoria) >= 1:
            clear_screen()
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingreso a mostrar productos de la categor√≠a '{por_categoria[0].get("categoria").upper()}'")
            logs_usuario.append(etapa_usuario)
            mensaje(f"üõí   PRODUCTOS DE LA CATEGOR√çA '{por_categoria[0].get("categoria").upper()}' ‚úì")
            mostrar_lista(ordenar_lista(por_categoria, "categoria", "marca", "modelo", True))
            resultado_busqueda = por_categoria
            if len(resultado_busqueda) == 1:
                if resultado_busqueda[0]["ingreso"]:
                    mensaje("üõí   MOVIMIENTOS DE COMPRA   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["ingreso"],"compra")
                if resultado_busqueda[0]["egreso"]:
                    mensaje("üõí   MOVIMIENTOS DE VENTA   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["egreso"],"venta")
                if resultado_busqueda[0]["ajuste"]:
                    mensaje("üõí   MOVIMIENTOS DE AJUSTE   ‚úì")
                    mostrar_detalle_cambio_stock(resultado_busqueda[0]["ajuste"],"ajuste")
        else:
            clear_screen()
            mensaje("üõí   CATEGOR√çA INEXISTENTE   ‚úï")
    return id_autoinc


def menu_buscar_producto(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que muestra al usuario las opciones de b√∫squeda de producto

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    bucle_menu_buscar = True
    while bucle_menu_buscar:
        mostrar_menu("   Men√∫ [BUSCAR PRODUCTOS] ‚Üí", lista_menu_buscar, 1, 6, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(7, "Ingresar DATOS"):
            case 1:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ buscar productos por id")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_buscar_producto_por_id(productos, usuario, logs_usuario, id_autoinc)
            case 2:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ buscar productos por descripci√≥n")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_buscar_producto_por_descripcion(productos, usuario, logs_usuario, id_autoinc)
            case 3:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ buscar productos por c√≥digo-marca")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_buscar_producto_por_codigo_marca(productos, usuario, logs_usuario, id_autoinc)              
            case 4:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ buscar productos por modelo-marca")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_buscar_producto_por_modelo_marca(productos, usuario, logs_usuario, id_autoinc)
            case 5:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ buscar productos por marca")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_buscar_producto_por_marca(productos, usuario, logs_usuario, id_autoinc)
            case 6:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ buscar productos por categor√≠a")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_buscar_producto_por_categoria(productos, usuario, logs_usuario, id_autoinc)
            case 7:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ buscar productos y vuelve al men√∫ principal")
                logs_usuario.append(etapa_usuario)
                bucle_menu_buscar = False
    return id_autoinc 


def submenu_actualizar_producto_por_id(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que actualiza un producto por su id

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    mensaje("üõí   INGRESE PRODUCTO A ACTUALIZAR   ‚Üí")                        
    producto_a_actualizar = encontrar_producto_por_id(productos)
    if producto_a_actualizar:
        clear_screen()
        mensaje("üõí   PRODUCTO ENCONTRADO   ‚úì")
        mostrar_lista(producto_a_actualizar)
        editar = True
        while editar:
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingresar a actualizar producto: '{producto_a_actualizar[0].get("codigo")} - {producto_a_actualizar[0].get("marca")}'", id_producto=producto_a_actualizar[0].get("id"))
            logs_usuario.append(etapa_usuario)                              
            productos, id_autoinc, actualizado = actualizar_atributos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            clear_screen()
            if actualizado:
                mensaje("üõí   PRODUCTO ACTUALIZADO   ‚úì")
            else:
                mensaje("üõí   PRODUCTO NO ACTUALIZADO   ‚úì")
            mostrar_lista(producto_a_actualizar)
            print("\n")
            mostrar_menu("   Men√∫ [SEGUIR EDITANDO] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                    mensaje(f"üõí   EDICI√ìN DEL PRODUCTO: '{producto_a_actualizar[0].get("codigo").upper()}' '{producto_a_actualizar[0].get("descripcion").upper()}'   ‚Üí")
                    mostrar_lista(producto_a_actualizar)
                    editar = True
                case 2:
                    clear_screen()
                    editar = False
    return id_autoinc


def submenu_actualizar_producto_por_descripcion(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que actualiza un producto por su descripci√≥n

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    mensaje("üõí   INGRESE PRODUCTO A ACTUALIZAR   ‚Üí")                        
    producto_a_actualizar = encontrar_producto_por_descripcion(productos)
    clear_screen()
    mensaje(f"üõí   EDICI√ìN DEL PRODUCTO: '{producto_a_actualizar[0].get("codigo").upper()}' '{producto_a_actualizar[0].get("descripcion").upper()}'   ‚Üí")
    mostrar_lista(producto_a_actualizar)
    if producto_a_actualizar:
        editar = True
        while editar:
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingresar a actualizar producto: '{producto_a_actualizar[0].get("codigo")} - {producto_a_actualizar[0].get("marca")}'", id_producto=producto_a_actualizar[0].get("id"))
            logs_usuario.append(etapa_usuario)                              
            productos, id_autoinc, actualizado = actualizar_atributos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            clear_screen()
            if actualizado:
                mensaje("üõí   PRODUCTO ACTUALIZADO   ‚úì")
            else:
                mensaje("üõí   PRODUCTO NO ACTUALIZADO   ‚úì")
            mostrar_lista(producto_a_actualizar)
            mostrar_menu("   Men√∫ [SEGUIR EDITANDO] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                    mensaje(f"üõí   EDICI√ìN DEL PRODUCTO: '{producto_a_actualizar[0].get("codigo").upper()}' '{producto_a_actualizar[0].get("descripcion").upper()}'   ‚Üí")
                    mostrar_lista(producto_a_actualizar)
                    editar = True
                case 2:
                    clear_screen()
                    editar = False
    return id_autoinc


def submenu_actualizar_producto_por_codigo(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que actualiza un producto por su c√≥digo-marca

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    clear_screen()
    mensaje("üõí   INGRESE PRODUCTO A ACTUALIZAR   ‚Üí")                        
    producto_a_actualizar = buscar_codigo(productos)
    if producto_a_actualizar:
        editar = True
        while editar:
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingresar a actualizar producto: '{producto_a_actualizar[0].get("codigo")} - {producto_a_actualizar[0].get("marca")}'", id_producto=producto_a_actualizar[0].get("id"))
            logs_usuario.append(etapa_usuario)                              
            productos, id_autoinc, actualizado = actualizar_atributos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            clear_screen()
            if actualizado:
                mensaje("üõí   PRODUCTO ACTUALIZADO   ‚úì")
            else:
                mensaje("üõí   PRODUCTO NO ACTUALIZADO   ‚úì")
            mostrar_lista(producto_a_actualizar)
            mostrar_menu("   Men√∫ [SEGUIR EDITANDO] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                    mensaje(f"üõí   EDICI√ìN DEL PRODUCTO: '{producto_a_actualizar[0].get("codigo").upper()}' '{producto_a_actualizar[0].get("descripcion").upper()}'   ‚Üí")
                    mostrar_lista(producto_a_actualizar)
                    editar = True
                case 2:
                    clear_screen()
                    editar = False
    return id_autoinc


def submenu_actualizar_producto_por_marca(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que actualiza un producto por su marca

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    marca_a_actualizar = ""
    lista_productos_nueva_marca = []
    lista_marcas = crear_listas_valores(productos, "marca")
    while len(marca_a_actualizar) == 0 or marca_a_actualizar not in lista_marcas:
        clear_screen()
        mensaje("üõí   INGRESE LA MARCA DE PRODUCTOS A ACTUALIZAR   ‚Üí")
        imprimir_lista(lista_marcas, "Marcas en el Stock")
        marca_a_actualizar = input("\n‚Ä¢ Marca: ").strip().lower()
    marca_actualizada = ""
    while len(marca_actualizada) == 0:
        marca_actualizada = input("\n‚Ä¢ Nueva Marca: ").strip().lower()
    c = 0
    for i in productos:
        if i.get("marca") == marca_a_actualizar:
            i.update({"marca": marca_actualizada})
            fecha = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            i.update({"fecha_modificacion": fecha})
            lista_productos_nueva_marca.append(i.get("id"))
            c += 1
    if c > 0:
        for i in range(len(lista_productos_nueva_marca)):
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto cambia de marca '{marca_a_actualizar.upper()}' a '{marca_a_actualizar.upper()}'", id_producto=lista_productos_nueva_marca[i])
            logs_usuario.append(etapa_usuario)
        actualizar_item_producto_en_db("crud", "productos", lista_productos_nueva_marca, "marca", marca_actualizada)
        clear_screen()
        mensaje(f"MARCA ACTUALIZADA ‚úì \n{marca_a_actualizar.upper()} cambia a {marca_actualizada.upper()}")
    else:
        clear_screen()
        mensaje("üõí   MARCA INEXISTENTE   ‚úï")
    return id_autoinc


def submenu_actualizar_producto_por_modelo(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que actualiza un producto por su modelo-marca

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    modelo_a_actualizar = ""
    lista_productos_nuevo_modelo_marca = []
    lista_modelos = crear_listas_valores_dos_claves(productos, "modelo", "marca")
    no_hay_modelo = True
    while len(modelo_a_actualizar) == 0 or no_hay_modelo:
        clear_screen()
        mensaje("üõí   INGRESE MODELO DE UNA MARCA A ACTUALIZAR   ‚Üí")
        imprimir_lista_dos_valores(lista_modelos, "Modelos en el Stock")
        modelo_a_actualizar = input("\n‚Ä¢ Modelo: ").strip().lower()
        for i in range(len(lista_modelos)):
            if modelo_a_actualizar in lista_modelos[i]:
                no_hay_modelo = False
    marca_a_actualizar = ""
    no_hay_marca = True
    while len(marca_a_actualizar) == 0 or no_hay_marca:
        marca_a_actualizar = input("\n‚Ä¢ Marca: ").strip().lower()
        for i in range(len(lista_modelos)):
            if marca_a_actualizar in lista_modelos[i] and modelo_a_actualizar in lista_modelos[i]:
                no_hay_marca = False
    modelo_actualizado = ""
    while len(modelo_actualizado) == 0:
        modelo_actualizado = input("\n\n‚Ä¢ Nuevo Modelo: ").strip().lower()
    c = 0
    for i in productos:
        if i.get("modelo") == modelo_a_actualizar and i.get("marca") == marca_a_actualizar:
            i.update({"modelo": modelo_actualizado})
            fecha = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            i.update({"fecha_modificacion": fecha})
            lista_productos_nuevo_modelo_marca.append(i.get("id"))
            c += 1
    if c > 0:
        for i in range(len(lista_productos_nuevo_modelo_marca)):
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto cambia de marca-modelo '{marca_a_actualizar.upper()} {modelo_a_actualizar.upper()}' a '{marca_a_actualizar.upper()} {modelo_actualizado.upper()}'", id_producto=lista_productos_nuevo_modelo_marca[i])
            logs_usuario.append(etapa_usuario)
        actualizar_item_producto_en_db("crud", "productos", lista_productos_nuevo_modelo_marca, "modelo", modelo_actualizado)
        clear_screen()
        mensaje(f"üõí   MODELO ACTUALIZADO   ‚úì \n{marca_a_actualizar.upper()} {modelo_a_actualizar.upper()} cambia a {marca_a_actualizar.upper()} {modelo_actualizado.upper()}")
    else:
        clear_screen()
        mensaje(f"üõí   MODELO '{modelo_a_actualizar.upper()}' INEXISTENTE PARA LA MARCA '{marca_a_actualizar.upper()}'  ‚úï")
    return id_autoinc


def submenu_actualizar_producto_por_categoria(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que actualiza un producto por su categor√≠a

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    categoria_a_actualizar = ""
    lista_productos_nueva_categoria = []
    lista_categorias = crear_listas_valores(productos, "categoria")
    while len(categoria_a_actualizar) == 0 or categoria_a_actualizar not in lista_categorias:
        clear_screen()
        mensaje("üõí   INGRESE CATEGOR√çA A ACTUALIZAR   ‚Üí") 
        imprimir_lista(lista_categorias, "Categor√≠as en el Stock")
        categoria_a_actualizar = input("\n‚Ä¢ Categor√≠a: ").strip().lower()
    categoria_actualizada = ""
    while len(categoria_actualizada) == 0:
        categoria_actualizada = input("\n‚Ä¢ Nueva Categor√≠a: ").strip().lower()
    c = 0
    for i in productos:
        if i.get("categoria") == categoria_a_actualizar:
            i.update({"categoria": categoria_actualizada})
            fecha = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            i.update({"fecha_modificacion": fecha})
            lista_productos_nueva_categoria.append(i.get("id"))
            c += 1
    if c > 0:
        for i in range(len(lista_productos_nueva_categoria)):
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto cambia de categor√≠a '{categoria_a_actualizar.upper()}' a '{categoria_actualizada.upper()}'", id_producto=lista_productos_nueva_categoria[i])
            logs_usuario.append(etapa_usuario)
        actualizar_item_producto_en_db("crud", "productos", lista_productos_nueva_categoria, "categoria", categoria_actualizada)
        clear_screen()
        mensaje(f"üõí   CATEGOR√çA ACTUALIZADA   ‚úì \n{categoria_a_actualizar.upper()} cambia a {categoria_actualizada.upper()}")
    else:
        clear_screen()
        mensaje("üõí   CATEGOR√çA INEXISTENTE   ‚úï")
    return id_autoinc


def menu_actualizar_producto(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que muestra al usuario las opciones de actualizaci√≥n de un producto

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """   
    clear_screen()
    bucle_menu_actualizar = True
    while bucle_menu_actualizar:
        mostrar_menu("   Men√∫ [ACTUALIZAR PRODUCTOS] ‚Üí", lista_menu_claves_producto, 1, 6, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(7, "Ingresar DATOS"):
            case 1:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ actualizar producto por id")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_actualizar_producto_por_id(productos, usuario, logs_usuario, id_autoinc)
            case 2:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ actualizar producto por descripci√≥n")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_actualizar_producto_por_descripcion(productos, usuario, logs_usuario, id_autoinc)
            case 3:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ actualizar producto por c√≥digo")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_actualizar_producto_por_codigo(productos, usuario, logs_usuario, id_autoinc)
            case 4:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ actualizar producto por marca")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_actualizar_producto_por_marca(productos, usuario, logs_usuario, id_autoinc)
            case 5:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ actualizar producto por modelo")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_actualizar_producto_por_modelo(productos, usuario, logs_usuario, id_autoinc)
            case 6:
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso al submen√∫ actualizar producto por categor√≠a")
                logs_usuario.append(etapa_usuario)
                id_autoinc = submenu_actualizar_producto_por_categoria(productos, usuario, logs_usuario, id_autoinc)
            case 7:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ actualizar producto")
                logs_usuario.append(etapa_usuario)
                bucle_menu_actualizar = False
    return id_autoinc


def submenu_actualizar_movimientos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc):
    """Funci√≥n que permite actualizar los movimientos de un producto determinado

    Args:
        productos (list): lista de productos
        producto_a_actualizar (list): producto a actualizar
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """
    if producto_a_actualizar:
        editar = True
        while editar:
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"ingresar a actualizar movimiento de producto: '{producto_a_actualizar[0].get("codigo")} - {producto_a_actualizar[0].get("marca")}'", id_producto=producto_a_actualizar[0].get("id"))
            logs_usuario.append(etapa_usuario)                              
            productos, id_autoinc, actualizado = actualizar_movimientos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            clear_screen()
            if actualizado:
                mensaje("üõí   PRODUCTO ACTUALIZADO   ‚úì")
            else:
                mensaje("üõí   PRODUCTO NO ACTUALIZADO   ‚úì")
            mostrar_lista(producto_a_actualizar)
            print("\n")
            mostrar_menu("   Men√∫ [SEGUIR EDITANDO] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                    mensaje(f"üõí   EDICI√ìN DEL PRODUCTO: '{producto_a_actualizar[0].get("codigo").upper()}' '{producto_a_actualizar[0].get("descripcion").upper()}'   ‚Üí")
                    mostrar_lista(producto_a_actualizar)
                    editar = True
                case 2:
                    clear_screen()
                    editar = False
    return id_autoinc


def menu_actualizar_movimientos_producto(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que muestra al usuario las opciones de b√∫squeda de un producto para su actualizaci√≥n

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """   
    clear_screen()
    bucle_menu_actualizar = True
    while bucle_menu_actualizar:
        mostrar_menu("   Men√∫ [ACTUALIZAR MOVIMIENTOS DE PRODUCTO] ‚Üí", lista_menu_claves_producto, 1, 3, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(4, "Ingresar DATOS"):
            case 1:
                clear_screen()
                mensaje("üõí   INGRESE PRODUCTO A ACTUALIZAR   ‚Üí")                        
                producto_a_actualizar = encontrar_producto_por_id(productos)
                id_autoinc = submenu_actualizar_movimientos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            case 2:
                clear_screen()
                mensaje("üõí   INGRESE PRODUCTO A ACTUALIZAR   ‚Üí")                        
                producto_a_actualizar = encontrar_producto_por_descripcion(productos)
                id_autoinc = submenu_actualizar_movimientos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            case 3:
                clear_screen()
                mensaje("üõí   INGRESE PRODUCTO A ACTUALIZAR   ‚Üí")                        
                producto_a_actualizar = buscar_codigo(productos)
                id_autoinc = submenu_actualizar_movimientos_producto(productos, producto_a_actualizar, usuario, logs_usuario, id_autoinc)
            case 4:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ actualizar movimientos producto")
                logs_usuario.append(etapa_usuario)
                bucle_menu_actualizar = False
    return id_autoinc


def submenu_eliminar_producto_por_id(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario eliminar un producto por su id, actualizando la base de datos de dicho producto y sus movimientos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """  
    bucle_producto_codigo = True
    clear_screen()
    mensaje("üõí   INGRESE PRODUCTO A ELIMINAR DEL STOCK   ‚Üí")
    while bucle_producto_codigo:
        producto_encontrado = encontrar_producto_por_id(productos)
        if producto_encontrado:
            clear_screen()
            mensaje(f"üõí   ELIMINACI√ìN DEL PRODUCTO: '{producto_encontrado[0].get("codigo").upper()}' '{producto_encontrado[0].get("id")}'   ‚Üí")
            mostrar_lista(producto_encontrado)
            print()                         
            mostrar_menu(f"   Men√∫ [CONFIRMAR ELIMINACI√ìN PRODUCTO '{producto_encontrado[0].get("codigo").upper()}'] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    for i in productos:
                        for j in producto_encontrado:
                            if i == j:
                                i.update({"estado": False})
                                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto eliminado: '({i.get("codigo")} - {i.get("marca")})'", id_producto=i.get("id"))
                                logs_usuario.append(etapa_usuario)
                    lista_productos_a_eliminar = []
                    productos_copia = productos[:]
                    for i in productos_copia:
                        if i.get("estado") == False:
                            lista_productos_a_eliminar.append(i["id"])
                            productos.remove(i)
                    eliminar_producto_en_db("crud", "productos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ingresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "egresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ajustes", lista_productos_a_eliminar)
                    clear_screen()
                    mensaje("üõí   PRODUCTO ELIMINADO   ‚úì")
                    bucle_producto_codigo = False                                
                case 2:
                    clear_screen()
                    bucle_producto_codigo = False
        else:
            mostrar_menu("   Men√∫ [VOLVER A BUSCAR] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                case 2:
                    clear_screen()
                    bucle_producto_codigo = False
    return id_autoinc


def submenu_eliminar_producto_por_descripcion(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario eliminar un producto por su descripci√≥n, actualizando la base de datos de dicho producto y sus movimientos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """  
    bucle_producto_codigo = True
    clear_screen()
    mensaje("üõí   INGRESE PRODUCTO A ELIMINAR DEL STOCK   ‚Üí")
    while bucle_producto_codigo:
        producto_encontrado = encontrar_producto_por_descripcion(productos)
        if producto_encontrado:
            clear_screen()
            mensaje(f"üõí   ELIMINACI√ìN DEL PRODUCTO: '{producto_encontrado[0].get("codigo").upper()}' '{producto_encontrado[0].get("descripcion").upper()}'   ‚Üí")
            mostrar_lista(producto_encontrado)
            print()                         
            mostrar_menu(f"   Men√∫ [CONFIRMAR ELIMINACI√ìN PRODUCTO '{producto_encontrado[0].get("codigo").upper()}'] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    for i in productos:
                        for j in producto_encontrado:
                            if i == j:
                                i.update({"estado": False})
                                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto eliminado: '({i.get("codigo")} - {i.get("marca")})'", id_producto=i.get("id"))
                                logs_usuario.append(etapa_usuario)
                    lista_productos_a_eliminar = []
                    productos_copia = productos[:]
                    for i in productos_copia:
                        if i.get("estado") == False:
                            lista_productos_a_eliminar.append(i["id"])
                            productos.remove(i)
                    eliminar_producto_en_db("crud", "productos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ingresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "egresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ajustes", lista_productos_a_eliminar)
                    clear_screen()
                    mensaje("üõí   PRODUCTO ELIMINADO   ‚úì")
                    bucle_producto_codigo = False                                
                case 2:
                    clear_screen()
                    bucle_producto_codigo = False
        else:
            mostrar_menu("   Men√∫ [VOLVER A BUSCAR] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                case 2:
                    clear_screen()
                    bucle_producto_codigo = False
    return id_autoinc


def submenu_eliminar_producto_por_codigo(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario eliminar un producto por su c√≥digo-marca, actualizando la base de datos de dicho producto y sus movimientos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """  
    bucle_producto_codigo = True
    clear_screen()
    mensaje("üõí   INGRESE PRODUCTO A ELIMINAR DEL STOCK   ‚Üí")
    while bucle_producto_codigo:
        producto_encontrado = buscar_codigo(productos)
        if producto_encontrado:
            clear_screen()
            mensaje(f"üõí   ELIMINACI√ìN DEL PRODUCTO: '{producto_encontrado[0].get("codigo").upper()}' '{producto_encontrado[0].get("descripcion").upper()}'   ‚Üí")
            mostrar_lista(producto_encontrado)
            print()                         
            mostrar_menu(f"   Men√∫ [CONFIRMAR ELIMINACI√ìN PRODUCTO '{producto_encontrado[0].get("codigo").upper()}'] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    for i in productos:
                        for j in producto_encontrado:
                            if i == j:
                                i.update({"estado": False})
                                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto eliminado: '({i.get("codigo")} - {i.get("marca")})'", id_producto=i.get("id"))
                                logs_usuario.append(etapa_usuario)
                    lista_productos_a_eliminar = []
                    productos_copia = productos[:]
                    for i in productos_copia:
                        if i.get("estado") == False:
                            lista_productos_a_eliminar.append(i["id"])
                            productos.remove(i)
                    eliminar_producto_en_db("crud", "productos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ingresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "egresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ajustes", lista_productos_a_eliminar)
                    clear_screen()
                    mensaje("üõí   PRODUCTO ELIMINADO   ‚úì")
                    bucle_producto_codigo = False                                
                case 2:
                    clear_screen()
                    bucle_producto_codigo = False
        else:
            mostrar_menu("   Men√∫ [VOLVER A BUSCAR] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    clear_screen()
                case 2:
                    clear_screen()
                    bucle_producto_codigo = False
    return id_autoinc


def submenu_eliminar_productos_de_una_marca(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario eliminar todos los productos de una marca seleccionada, actualizando la base de datos de dichos productos y sus movimientos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """  
    marca_valida = ""
    lista_marcas = crear_listas_valores(productos, "marca")
    while len(marca_valida) == 0 or marca_valida not in lista_marcas:
        clear_screen()
        mensaje("üõí   INGRESE LA MARCA DE PRODUCTOS A ELIMINAR   ‚Üí")
        imprimir_lista(lista_marcas, "Marcas en el Stock")
        marca_valida = input("\n‚Ä¢ Marca: ").strip().lower()
    print("\n")
    marca = buscar_producto_2(productos, "marca", marca_valida)
    if len(marca) > 0:
        clear_screen()
        mostrar_menu(f"   Men√∫ [CONFIRMAR ELIMINACI√ìN DE LA MARCA '{marca_valida.upper()}'] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                for i in productos:
                    for j in marca:
                        if i == j:
                            i.update({"estado": False})
                            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto eliminado: '({i.get("codigo")} - {i.get("marca")})'", id_producto=i.get("id"))
                            logs_usuario.append(etapa_usuario)
                lista_productos_a_eliminar = []
                productos_copia = productos[:]
                for i in productos_copia:
                    if i.get("estado") == False:
                        lista_productos_a_eliminar.append(i["id"])
                        productos.remove(i)
                eliminar_producto_en_db("crud", "productos", lista_productos_a_eliminar)
                eliminar_movimientos_producto_en_db("crud", "ingresos", lista_productos_a_eliminar)
                eliminar_movimientos_producto_en_db("crud", "egresos", lista_productos_a_eliminar)
                eliminar_movimientos_producto_en_db("crud", "ajustes", lista_productos_a_eliminar)
                mensaje("üõí   MARCA ELIMINADA   ‚úì")
            case 2:
                clear_screen()
    return id_autoinc


def submenu_eliminar_productos_de_un_modelo_marca(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario eliminar todos los productos de un modelo de una marca seleccionada, actualizando la base de datos de dichos productos y sus movimientos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """  
    modelo_valido = ""
    lista_modelos = crear_listas_valores_dos_claves(productos, "modelo", "marca")
    no_hay_modelo = True
    while len(modelo_valido) == 0 or no_hay_modelo:
        clear_screen()
        mensaje("üõí   INGRESE MODELO DE UNA MARCA A ELIMINAR   ‚Üí")
        imprimir_lista_dos_valores(lista_modelos, "Modelos en el Stock")
        modelo_valido = input("\n‚Ä¢ Modelo: ").strip().lower()
        for i in range(len(lista_modelos)):
            if modelo_valido in lista_modelos[i]:
                no_hay_modelo = False
    marca_valida = ""
    no_hay_marca = True
    while len(marca_valida) == 0 or no_hay_marca:
        marca_valida = input("\n‚Ä¢ Marca: ").strip().lower()
        for i in range(len(lista_modelos)):
            if marca_valida in lista_modelos[i] and modelo_valido in lista_modelos[i]:
                no_hay_marca = False
    marca = buscar_producto_2(productos, "marca", marca_valida)
    if len(marca) > 0:
        modelo = buscar_producto_2(marca, "modelo", modelo_valido)
        if len(modelo) > 0:
            clear_screen()
            mostrar_menu(f"   Men√∫ [CONFIRMAR ELIMINACI√ìN DEL MODELO '{marca_valida.upper()} {modelo_valido.upper()}'] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
            match opcion_menu(2, "Ingresar DATOS"):
                case 1:
                    for i in productos:
                        for j in modelo:
                            if i == j:
                                i.update({"estado": False})
                                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto eliminado: '({i.get("codigo")} - {i.get("marca")})'", id_producto=i.get("id"))
                                logs_usuario.append(etapa_usuario)
                    lista_productos_a_eliminar = []
                    productos_copia = productos[:]
                    for i in productos_copia:
                        if i.get("estado") == False:
                            lista_productos_a_eliminar.append(i["id"])
                            productos.remove(i)
                    eliminar_producto_en_db("crud", "productos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ingresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "egresos", lista_productos_a_eliminar)
                    eliminar_movimientos_producto_en_db("crud", "ajustes", lista_productos_a_eliminar)
                    mensaje("üõí   MODELO ELIMINADO   ‚úì")
                case 2:
                    clear_screen()
    return id_autoinc


def menu_eliminar_producto(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que muestra al usuario las opciones de eliminaci√≥n de un producto/productos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """    
    clear_screen()
    bucle_menu_eliminar = True
    while bucle_menu_eliminar:
        mostrar_menu("  Men√∫ [ELIMINAR PRODUCTOS] ‚Üí", lista_menu_eliminar, 1, 5, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(6, "Ingresar DATOS"):
            case 1:
                id_autoinc = submenu_eliminar_producto_por_id(productos, usuario, logs_usuario, id_autoinc)
            case 2:
                id_autoinc = submenu_eliminar_producto_por_descripcion(productos, usuario, logs_usuario, id_autoinc)
            case 3:
                id_autoinc = submenu_eliminar_producto_por_codigo(productos, usuario, logs_usuario, id_autoinc)
            case 4:
                id_autoinc = submenu_eliminar_productos_de_una_marca(productos, usuario, logs_usuario, id_autoinc)
            case 5:
                id_autoinc = submenu_eliminar_productos_de_un_modelo_marca(productos, usuario, logs_usuario, id_autoinc)
            case 6: #opci√≥n para salir del men√∫ eliminar
                clear_screen()
                bucle_menu_eliminar = False
    return id_autoinc


def submenu_gestionar_productos_eliminados(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite mostrar al usuario los productos eliminados y poder recuperarlos con sus movimientos

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """   
    clear_screen()
    productos_eliminados = iniciar_carga_productos_eliminados()
    if productos_eliminados:
        mensaje("üõí   LISTA DE PRODUCTOS ELIMINADOS   ‚Üì")
        mostrar_lista_eliminados(ordenar_lista(productos_eliminados, "fecha_baja", "marca", "modelo", False))
        print("\n")
        mostrar_menu("   Men√∫ [RECUPERAR PRODUCTOS] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                lista_productos_eliminados_a_recuperar = []
                for i in productos_eliminados:
                    etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"producto recuperado: '({i.get("codigo")} - {i.get("marca")})'", id_producto=i.get("id"))
                    logs_usuario.append(etapa_usuario)
                    lista_productos_eliminados_a_recuperar.append((i["id"], i["cantidad"]))
                productos.extend(productos_eliminados)
                productos_eliminados.clear()
                recuperar_producto_eliminados_en_db("crud", "productos", lista_productos_eliminados_a_recuperar)
                recuperar_movimientos_producto_en_db("crud", "ingresos", lista_productos_eliminados_a_recuperar)
                recuperar_movimientos_producto_en_db("crud", "egresos", lista_productos_eliminados_a_recuperar)
                recuperar_movimientos_producto_en_db("crud", "ajustes", lista_productos_eliminados_a_recuperar)
                clear_screen()
                mensaje("üõí   PRODUCTOS RECUPERADOS   ‚úì")
            case 2:
                clear_screen()
    else:
        clear_screen()
        mensaje("üõí   NO HAY PRODUCTOS ELIMINADOS   ‚Üí")
        print("\n")
    return id_autoinc


def submenu_crear_un_backup(usuario, logs_usuario, id_autoinc):
    """Funci√≥n que crea un backup de la base de datos

    Args:
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """   
    clear_screen()
    mostrar_menu("   Men√∫ [CREA UN BACKUP DE LA BASE DE DATOS] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
    match opcion_menu(2, "Ingresar DATOS"):
        case 1:
            try:
                conexion_original = sqlite3.connect('crud.db')
                conexion_backup = sqlite3.connect('crud_backup.db')
                try:
                    conexion_original.execute('''BEGIN TRANSACTION''')
                    conexion_original.backup(conexion_backup)
                    conexion_original.commit()
                except:
                    conexion_original.rollback()
            except sqlite3.Error as error:
                mensaje ('‚úï NO SE PUDO ESTABLECER LA CONEXI√ìN ‚úï')
            finally:
                if conexion_backup:
                    conexion_backup.close()
                if conexion_original:
                    conexion_original.close()
            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"backup realizado")
            logs_usuario.append(etapa_usuario)
            clear_screen()
            mensaje(f"üõí   BACKUP REALIZADO   ‚úì")
            print("\n")
        case 2:
            clear_screen()
    return id_autoinc


def submenu_volver_desde_backup(usuario, logs_usuario, id_autoinc):
    """Funci√≥n que recupera la base de datos desde un backup previamente creado

    Args:
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """   
    if cargar_lista_con_id_desde_db("crud_backup", "productos"):
        clear_screen()
        mensaje(f"üõí   VOLVER A BACKUP   ‚Üí")
        mostrar_menu("   Men√∫ [CONFIRMAR OPERACI√ìN] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                try:
                    conexion_backup = sqlite3.connect('crud_backup.db')
                    conexion_original = sqlite3.connect('crud.db')
                    try:
                        conexion_backup.execute('''BEGIN TRANSACTION''')
                        conexion_backup.backup(conexion_original)
                        conexion_backup.commit()
                    except:
                        conexion_backup.rollback()
                except sqlite3.Error as error:
                    mensaje ('‚úï NO SE PUDO ESTABLECER LA CONEXI√ìN ‚úï')
                finally:
                    if conexion_original:
                        conexion_original.close()
                    if conexion_backup:
                        conexion_backup.close()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"base de datos recuperada desde backup")
                logs_usuario.append(etapa_usuario)
                clear_screen()
                mensaje(f"üõí   BASE DE DATOS RECUPERADA  ‚úì")
                print("\n")
            case 2:
                clear_screen()
    else:
        clear_screen()
        mensaje(f"üõí   NO HAY BACKUP REALIZADO  ‚úï")
    return id_autoinc


def menu_mantenimiento(productos, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que muestra al usuario las opciones de mantenimiento de productos (recuperar productos eliminados, crear backup y volver desde backup)

    Args:
        productos (list): lista de productos
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """    
    clear_screen()
    bucle_menu_mantenimiento = True
    while bucle_menu_mantenimiento:
        mostrar_menu("   Men√∫ [MANTENIMIENTO DEL STOCK] ‚Üí", lista_menu_mantenimiento, 1, 3, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(4, "Ingresar DATOS"):
            case 1:
                id_autoinc = submenu_gestionar_productos_eliminados(productos, usuario, logs_usuario, id_autoinc)
            case 2:
                id_autoinc = submenu_crear_un_backup(usuario, logs_usuario, id_autoinc)
            case 3:
                id_autoinc = submenu_volver_desde_backup(usuario, logs_usuario, id_autoinc)
            case 4: # Volver al Men√∫ [PRINCIPAL]
                clear_screen()
                bucle_menu_mantenimiento = False
    return id_autoinc


def submenu_ver_usuarios_del_sistema(usuarios, usuario, logs_usuario, id_autoinc):
    """Funci√≥n que muestra al usuario 'administrador' un listado de usuarios del sistema

    Args:
        usuarios (list): lista de usuarios
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    mensaje("üõí   LISTADO DE USUARIOS   ‚Üí")
    etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"ingreso a ver usuarios del sistema")
    logs_usuario.append(etapa_usuario)
    mostrar_lista_usuarios(ordenar_lista(usuarios, "perfil_acceso", "mail", "id", True))
    print("\n")
    return id_autoinc


def submenu_agregar_usuario_al_sistema(usuarios, usuario, logs_usuario, id_autoinc):
    """Agrega un nuevo usuario, si ese usuario no existe previamente en la base de datos. Primero pasa ese nuevo registro a la base de datos y chequea que esos campos no existan en la misma. Trae de la BD el valor del id del usuario, si ese valor es nulo entonces agrega ese nuevo usuario y actualiza el id del usuario con el valor del indice de la BD en la lista de diccionarios 'usuarios'. Se va registrando en la lista logs_usuario lo que va ocurriendo y esa lista de sucesos devuelva esta funci√≥n junto con la variable entera id_autoinc.

    Args:
        usuarios (list): lista de usuarios
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    bucle_menu_agregar = True
    while bucle_menu_agregar:
        mostrar_menu("   Men√∫ [AGREGAR USUARIO] ‚Üí", lista_menu_usuarios, 2, 1, True, 1, "Men√∫ [GESTIONAR USUARIOS]", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                bucle_menu_agregar_usuario = True
                while bucle_menu_agregar_usuario:
                    clear_screen()
                    mensaje("üõí   INGRESE USUARIO AL SISTEMA   ‚Üí")
                    nuevo_usuario = agregar_usuario(perfiles_usuario)
                    id_preex = traer_id_producto_preex_desde_db("crud", "usuarios", nuevo_usuario)
                    if id_preex:
                        etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"intento de agregar usuario '{nuevo_usuario["mail"]} - {nuevo_usuario["perfil_acceso"]}': ya existe en stock ‚úï", id_usuario_a_gestionar=id_preex)
                        logs_usuario.append(etapa_usuario) 
                        clear_screen()
                        mensaje(f"üõí   USUARIO EXISTENTE   ‚úï")
                        print("\n")
                        mostrar_menu("   Men√∫ [AGREGAR USUARIO AL SISTEMA] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
                        match opcion_menu(2, "Ingresar DATOS"):
                            case 1:
                                clear_screen()
                                bucle_menu_agregar_usuario = True
                            case 2:
                                clear_screen()
                                bucle_menu_agregar_usuario = False
                    else:
                        agregar_usuario_en_db("crud", "usuarios", nuevo_usuario)
                        nuevo_usuario.update({"id": traer_id_producto_desde_db("crud", "usuarios", nuevo_usuario)})
                        usuarios.append(nuevo_usuario)
                        etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"usuario: '({nuevo_usuario["mail"]} - {nuevo_usuario["perfil_acceso"]})' agregado ‚úì", id_usuario_a_gestionar=nuevo_usuario["id"])
                        logs_usuario.append(etapa_usuario)                                                  
                        clear_screen()
                        mensaje(f"üõí   USUARIO AGREGADO    ‚úì")
                        print("\n")
                        mostrar_menu("   Men√∫ [AGREGAR USUARIO AL SISTEMA] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
                        match opcion_menu(2, "Ingresar DATOS"):
                            case 1:
                                bucle_menu_agregar_usuario = True
                            case 2:
                                clear_screen()
                                bucle_menu_agregar_usuario = False
            case 2:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ agregar usuario")
                logs_usuario.append(etapa_usuario)
                bucle_menu_agregar = False
    return id_autoinc


def submenu_editar_datos_de_usuario_del_sistema(usuarios, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario 'administrador' editar los atributos de un usuario del sistema

    Args:
        usuarios (list): lista de usuarios
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    bucle_menu_editar = True
    while bucle_menu_editar:
        mostrar_menu("   Men√∫ [EDITAR DATOS DEL USUARIO] ‚Üí", lista_menu_usuarios, 3, 1, True, 1, "Men√∫ [GESTIONAR USUARIOS]", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                mensaje("üõí   LISTADO DE USUARIOS   ‚Üí")
                mostrar_lista_usuarios(ordenar_lista(usuarios, "perfil_acceso", "mail", "id", True))
                print("\n")
                mensaje(f"üõí   INGRESAR USUARIO A EDITAR: ITEM '1' - '{len(usuarios)}'  ‚Üí")
                i = opcion_menu_con_0(len(usuarios), "Ingresar DATOS / (0) Salir")
                if i != 0:
                    indice_item = i - 1
                    usuario_a_editar = usuarios[indice_item]
                    lista_usuario_a_editar = []
                    lista_usuario_a_editar.append(usuario_a_editar)
                    clear_screen()
                    mensaje(f"üõí   '{usuario_a_editar.get("nombre").upper()} {usuario_a_editar.get("apellido").upper()}' ‚Üí‚Üí‚Üí {usuario_a_editar.get("mail").upper()}")
                    mostrar_lista_usuarios(lista_usuario_a_editar, False)
                    print("\n")
                    mostrar_menu("   Men√∫ [EDITAR USUARIOS] ‚Üí", lista_menu_claves_usuarios, 1, 7, True, 1, "[SALIR]", "", "")
                    i = opcion_menu(8, "Ingresar DATOS")
                    while i != 8:
                        id_autoinc = editar_usuario(usuario_a_editar, perfiles_usuario, i, usuarios, usuario, logs_usuario, id_autoinc)[0]
                        clear_screen()
                        mensaje(f"üõí   '{usuario_a_editar.get("nombre").upper()} {usuario_a_editar.get("apellido").upper()}' ‚Üí‚Üí‚Üí {usuario_a_editar.get("mail").upper()}")
                        mostrar_lista_usuarios(lista_usuario_a_editar, False)
                        mensaje(f"üõí   USUARIO EDITADO    ‚úì")
                        mostrar_menu("   Men√∫ [EDITAR USUARIOS] ‚Üí", lista_menu_claves_usuarios, 1, 7, True, 1, "[SALIR]", "", "")
                        i = opcion_menu(8, "Ingresar DATOS")
                    actualizar_usuario_en_db("crud", "usuarios", usuario_a_editar)
                clear_screen()
            case 2:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ editar datos del usuario")
                logs_usuario.append(etapa_usuario)
                bucle_menu_editar = False
    return id_autoinc


def submenu_eliminar_usuario_del_sistema(usuarios, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite al usuario 'administrador' eliminar un usuario/usuarios seleccionado/s

    Args:
        usuarios (list): lista de usuarios
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    bucle_menu_eliminar = True
    while bucle_menu_eliminar:
        mostrar_menu("   Men√∫ [ELIMINAR USUARIO] ‚Üí", lista_menu_usuarios, 4, 1, True, 1, "Men√∫ [GESTIONAR USUARIOS]", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                mensaje("üõí   LISTADO DE USUARIOS   ‚Üí")
                mostrar_lista_usuarios(usuarios)
                print("\n")
                mensaje(f"üõí   INGRESAR RANGO DE USUARIOS A ELIMINAR '1' - '{len(usuarios)}'  ‚Üí")
                primer_usuario = opcion_menu_2_con_0(1, len(usuarios), "'Primer USUARIO'/ (0) Salir")
                if primer_usuario != 0:
                    ultimo_usuario = opcion_menu_2_con_0(primer_usuario, len(usuarios)-primer_usuario+1, "'√öltimo USUARIO'/ (0) Salir")
                    if ultimo_usuario != 0:
                            clear_screen()
                            usuarios_copia = usuarios[:]
                            lista_usuarios_a_eliminar = []
                            for i in usuarios[primer_usuario-1:ultimo_usuario]:
                                lista_usuarios_a_eliminar.append(i.get("id"))
                            clear_screen()
                            mensaje("üõí   LISTADO DE USUARIOS A ELIMINAR  ‚Üí")
                            mostrar_lista_usuarios_seleccion(usuarios, primer_usuario, ultimo_usuario)
                            print("\n")
                            mostrar_menu("   Men√∫ [ELIMINAR USUARIOS] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
                            match opcion_menu(2, "Ingresar DATOS"):
                                case 1:
                                    for i in usuarios_copia:
                                        if i["id"] in lista_usuarios_a_eliminar:
                                            usuarios.remove(i)
                                            etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"usuario: '({i["mail"]} - {i["perfil_acceso"]})' eliminado ‚úï", id_usuario_a_gestionar=i["id"])
                                            logs_usuario.append(etapa_usuario) 
                                    clear_screen()
                                    mensaje("üõí   USUARIOS ELIMINADOS   ‚úì")
                                    eliminar_usuario_en_db("crud", "usuarios", lista_usuarios_a_eliminar)
                                case 2:
                                    clear_screen()
                    else:
                        clear_screen()
                else:
                    clear_screen()
            case 2:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del men√∫ eliminar usuario")
                logs_usuario.append(etapa_usuario)
                bucle_menu_eliminar = False
    return id_autoinc


def submenu_gestionar_usuarios_eliminados(usuarios, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que permite mostrar al usuario 'administrador' los usuarios eliminados y poder recuperarlos

    Args:
        usuarios (list): lista de usuarios
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    usuarios_eliminados = cargar_lista_con_id_desde_db_opcion("crud", "usuarios", False)
    if usuarios_eliminados:
        mensaje("üõí   LISTA DE USUARIOS ELIMINADOS   ‚Üì")
        mostrar_lista_usuarios_eliminados(usuarios_eliminados)
        print("\n")
        mostrar_menu("   Men√∫ [RECUPERAR USUARIOS] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                lista_usuarios_eliminados_a_recuperar = []
                if usuarios_eliminados != []:
                    for i in usuarios_eliminados:
                        fecha = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        i.update({"fecha_alta": fecha})
                        i.update({"fecha_modificacion": ""})
                        i.update({"fecha_baja": ""})
                        etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"usuario: '({i["mail"]} - {i["perfil_acceso"]})' recuperado ‚úì", id_usuario_a_gestionar=i["id"])
                        logs_usuario.append(etapa_usuario) 
                        lista_usuarios_eliminados_a_recuperar.append(i["id"])
                    usuarios.extend(usuarios_eliminados)
                    usuarios_eliminados.clear()
                    recuperar_usuarios_eliminados_en_db("crud", "usuarios", lista_usuarios_eliminados_a_recuperar)
                    clear_screen()
                    mensaje("üõí   USUARIOS RECUPERADOS   ‚úì")
                    clear_screen()
            case 2:
                clear_screen()
    else:
        clear_screen()
        mensaje("üõí   NO HAY USUARIOS ELIMINADOS   ‚Üí")
        print("\n")
    return id_autoinc


def submenu_generar_reporte_de_tiempo_de_uso(usuario, logs_usuario, id_autoinc):
    """Funci√≥n que genera reporte de tiempo de uso del sistema de los usuarios en un per√≠odo de tiempo estipulado. El usuario 'administrador' puede generar un reporte de todos los usuarios pero el 'supervisor' no puede ver los movimientos del 'administrador'

    Args:
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    bucle_menu_generar = True
    while bucle_menu_generar:
        mostrar_menu("   Men√∫ [GENERAR REPORTE DE USO] ‚Üí", lista_menu_usuarios, 6, 1, True, 1, "Men√∫ [GESTIONAR USUARIOS]", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                mensaje("üõí   INGRESE LAS FECHAS (DESDE‚ÜíHASTA) PARA GENERAR EL REPORTE  ‚Üí")
                fecha_desde = input(f"\n‚Ä¢ Fecha Desde ('YYYY-MM-DD'‚ü©: ").strip().lower()
                while not validar_fecha(fecha_desde):
                    fecha_desde= input(f"\n‚Ä¢ Fecha Desde ('YYYY-MM-DD'‚ü©: ").strip().lower()
                fecha_hasta = input(f"\n‚Ä¢ Fecha Hasta ('YYYY-MM-DD'‚ü©: ").strip().lower()
                while not validar_fecha(fecha_hasta) or fecha_hasta < fecha_desde:
                    fecha_hasta= input(f"\n‚Ä¢ Fecha hasta('YYYY-MM-DD'‚ü©: ").strip().lower()
                if usuario["perfil_acceso"] == "administrador":
                    lista_reporte = generar_reportes_tiempo_usuario_en_db("crud", "logs_usuarios", fecha_desde, fecha_hasta, usuario)
                else:
                    lista_reporte = generar_reportes_tiempo_usuario_en_db("crud", "logs_usuarios", fecha_desde, fecha_hasta, usuario)
                clear_screen()
                reportar_tiempo_usuarios_por_dia_entrefechas(lista_reporte, usuario)
                print()
                reportar_tiempo_por_usuario_total_entrefechas(lista_reporte, usuario)
                print()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"genero reporte de tiempo de uso desde '{fecha_desde} hasta {fecha_hasta}'")
                logs_usuario.append(etapa_usuario)
            case 2:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del submen√∫ generar reportes de tiempo de uso")
                logs_usuario.append(etapa_usuario)  
                bucle_menu_generar = False
    return id_autoinc 


def submenu_generar_reporte_de_ventas(usuario, logs_usuario, id_autoinc):
    """Funci√≥n que genera reporte de ventas de los usuarios en un per√≠odo de tiempo estipulado. El usuario 'administrador' puede generar un reporte de todos los usuarios pero el 'supervisor' no puede ver los movimientos del 'administrador'

    Args:
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    bucle_menu_generar = True
    while bucle_menu_generar:
        mostrar_menu("   Men√∫ [GENERAR REPORTE DE VENTAS] ‚Üí", lista_menu_usuarios, 7, 1, True, 1, "Men√∫ [GESTIONAR USUARIOS]", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                clear_screen()
                mensaje("üõí   INGRESE LAS FECHAS (DESDE‚ÜíHASTA) PARA GENERAR EL REPORTE  ‚Üí")
                fecha_desde = input(f"\n‚Ä¢ Fecha Desde ('YYYY-MM-DD'‚ü©: ").strip().lower()
                while not validar_fecha(fecha_desde):
                    fecha_desde= input(f"\n‚Ä¢ Fecha Desde ('YYYY-MM-DD'‚ü©: ").strip().lower()
                fecha_hasta = input(f"\n‚Ä¢ Fecha Hasta ('YYYY-MM-DD'‚ü©: ").strip().lower()
                while not validar_fecha(fecha_hasta) or fecha_hasta < fecha_desde:
                    fecha_hasta= input(f"\n‚Ä¢ Fecha hasta('YYYY-MM-DD'‚ü©: ").strip().lower()
                if usuario["perfil_acceso"] == "administrador":
                    lista_reporte = generar_reportes_ventas_en_db("crud", "logs_usuarios", fecha_desde, fecha_hasta, usuario)
                else:
                    lista_reporte = generar_reportes_ventas_en_db("crud", "logs_usuarios", fecha_desde, fecha_hasta, usuario)
                clear_screen()
                reportar_ventas_por_usuario_por_dia_entrefechas(lista_reporte, usuario)
                print()
                reportar_ventas_por_usuario_total_entrefechas(lista_reporte, usuario)
                print()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,f"genero reporte de cantidad de ventas desde '{fecha_desde} hasta {fecha_hasta}'")
                logs_usuario.append(etapa_usuario)
            case 2:
                clear_screen()
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"sale del submen√∫ generar reportes cantidad de ventas")
                logs_usuario.append(etapa_usuario)  
                bucle_menu_generar = False
    return id_autoinc 


def submenu_eliminar_logs_usuarios(usuario, logs_usuario, id_autoinc):
    """Funci√≥n que muestra al usuario 'administrador' la opci√≥n de eliminar los logs de los usuarios

    Args:
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        id_autoinc (int): variable id autoincremental
    """   
    if cargar_lista_con_id_desde_db("crud", "logs_usuarios"):
        clear_screen()
        mensaje(f"üõí   ELIMINAR LOGS DE USUARIOS   ‚Üí")
        mostrar_menu("   Men√∫ [CONFIRMAR OPERACI√ìN] ‚Üí", lista_si_no, 1, 2, True, 0, "", "", "")
        match opcion_menu(2, "Ingresar DATOS"):
            case 1:
                eliminar_logs_usuario_en_db("crud", "logs_usuarios")
                etapa_usuario, id_autoinc = seguir_usuario(usuario, id_autoinc,"base de datos recuperada desde backup")
                logs_usuario.append(etapa_usuario)
                clear_screen()
                mensaje(f"üõí   LOGS USUARIOS ELIMINADOS  ‚úì")
                print("\n")
            case 2:
                clear_screen()
    else:
        clear_screen()
        mensaje(f"üõí   NO HAY LOGS USUARIOS  ‚úï")
    return id_autoinc



def menu_gestionar_usuarios(usuarios, usuario, logs_usuario, id_autoinc):
    """Funci√≥n con men√∫ interactivo que muestra al usuario administrador las opciones de gestionar a los usuarios y generar reportes de tiempo de uso del sistema y de ventas. Tambi√©n el usuario 'supervisor' tiene acceso a ciertas opciones de este men√∫ pero con algunas diferencias
    Args:
        usuarios (list): lista de usuarios
        usuario (dict): usuario del sistema
        logs_usuario (list): registro de acciones del usuario en el sistema
        id_autoinc (int): variable autoincremental que cursa a trav√©s de todo el programa y que da un id √∫nico a cada evento para que pueda registrarse en un archivo json

    Returns:
        _type_: _description_
    """
    clear_screen()
    bucle_menu_gestionar_usuarios = True
    while bucle_menu_gestionar_usuarios:
        mostrar_menu("   Men√∫ [GESTIONAR USUARIOS] ‚Üí", lista_menu_usuarios, 1, 8, True, 1, "Men√∫ [PRINCIPAL]", "", "")
        match opcion_menu(9, "Ingresar DATOS"):
            case 1:
                if usuario["perfil_acceso"] == "administrador":
                    id_autoinc = submenu_ver_usuarios_del_sistema(usuarios, usuario, logs_usuario, id_autoinc)
                else:
                    bucle_menu_gestionar_usuarios = menu_restriccion_de_acceso("perfil sin acceso a esta funcionalidad")
            case 2:
                if usuario["perfil_acceso"] == "administrador":
                    id_autoinc = submenu_agregar_usuario_al_sistema(usuarios, usuario, logs_usuario, id_autoinc)
                else:
                    bucle_menu_gestionar_usuarios = menu_restriccion_de_acceso("perfil sin acceso a esta funcionalidad")
            case 3:
                if usuario["perfil_acceso"] == "administrador":
                    id_autoinc = submenu_editar_datos_de_usuario_del_sistema(usuarios, usuario, logs_usuario, id_autoinc)
                else:
                    bucle_menu_gestionar_usuarios = menu_restriccion_de_acceso("perfil sin acceso a esta funcionalidad")
            case 4:
                if usuario["perfil_acceso"] == "administrador":
                    id_autoinc = submenu_eliminar_usuario_del_sistema(usuarios, usuario, logs_usuario, id_autoinc)
                else:
                    bucle_menu_gestionar_usuarios = menu_restriccion_de_acceso("perfil sin acceso a esta funcionalidad")
            case 5:
                if usuario["perfil_acceso"] == "administrador":
                    id_autoinc = submenu_gestionar_usuarios_eliminados(usuarios, usuario, logs_usuario, id_autoinc)
                else:
                    bucle_menu_gestionar_usuarios = menu_restriccion_de_acceso("perfil sin acceso a esta funcionalidad")
            case 6:
                id_autoinc = submenu_generar_reporte_de_tiempo_de_uso(usuario, logs_usuario, id_autoinc)
            case 7:
                id_autoinc = submenu_generar_reporte_de_ventas(usuario, logs_usuario, id_autoinc)
            case 8:
                if usuario["perfil_acceso"] == "administrador":
                    id_autoinc = submenu_eliminar_logs_usuarios(usuario, logs_usuario, id_autoinc)
                else:
                    bucle_menu_gestionar_usuarios = menu_restriccion_de_acceso("perfil sin acceso a esta funcionalidad")
            case 9:
                clear_screen()
                bucle_menu_gestionar_usuarios = False
    return id_autoinc